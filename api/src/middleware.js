
const Boom = require('@hapi/boom');
const admin = require("./admin");

/**
 * A HOF that wraps an async callback to properly trigger the
 * Express error-handling middleware on errors.
 *
 * @param {Function} fn an async callback.
 * @returns {(req: any, res: any, next: any) => any} an Express callback that resolves the wrapped async fn.
 */
const asyncWrapper = (fn) => (req, res, next) => Promise.resolve(fn(req, res, next)).catch(next);


/**
 * A middleware function to authenticate requests.
 * Throws 401 if not authenticated, otherwise next().
 *
 */
const authenticate = asyncWrapper((req, res, next) => {
  if (!req.headers.authorization) {
    next(Boom.unauthorized('Missing authentication header'));
    return undefined;
  }
  const idToken = req.headers.authorization.split(' ')[1];
  if (!idToken) {
    console.error('Authorization token was not provided');
    next(Boom.unauthorized('Invalid authentication'));
    return undefined;
  }
  return admin.auth().verifyIdToken(idToken)
    .then((decodedToken) => {
      const { uid } = decodedToken;
      req.body.uid = uid;
      console.log(`User is authenticated with uid: ${uid}`);
      next();
    }).catch((error) => {
      if (error.code === 'auth/id-token-revoked') {
        // User needs to be re-authenticated on client.
        next(Boom.unauthorized('Re-authentication needed'));
      } else {
        next(Boom.unauthorized('Invalid authentication'));
      }
      console.error(error);
    });
});


/**
 * A catch-all error handler that sends a formatted JSON response.
 * Uses Boom to set the status code and provide consistent formatting.
 *
 * If using multiple error handlers, this should be the last one.
 *
 * @param {Object} err a javascript Error object.
 * @param {Object} req the Express request object.
 * @param {Object} res the Express response object.
 * @param {Function} next the Express next callback.
 */
const errorHandler = (err, req, res, next) => {
  let error = err;

  console.error(`${err.message}\n${err.stack}`);

  // handle standard javascript errors.
  if (!error.isBoom) error = Boom.boomify(error);

  console.error('HANDLED!');

  // these are generated by Boom, so they're guaranteed to exist.
  const { statusCode, payload } = error.output;
  res.status(statusCode).json(payload);
};

module.exports = { asyncWrapper, errorHandler, authenticate };
